// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/operator-framework/api/pkg/operators/v1

package v1

#OperatorGroupAnnotationKey:             "olm.operatorGroup"
#OperatorGroupNamespaceAnnotationKey:    "olm.operatorNamespace"
#OperatorGroupTargetsAnnotationKey:      "olm.targetNamespaces"
#OperatorGroupProvidedAPIsAnnotationKey: "olm.providedAPIs"
#OperatorGroupKind:                      "OperatorGroup"
#OperatorGroupLabelPrefix:               "olm.operatorgroup.uid/"
#OperatorGroupLabelTemplate:             "olm.operatorgroup.uid/%s"

// OperatorGroupSpec is the spec for an OperatorGroup resource.
#OperatorGroupSpec: {
	// Selector selects the OperatorGroup's target namespaces.
	// +optional
	selector?: null | #LabelSelector @go(Selector,*github.com/operator-framework/api/vendor/metav1.LabelSelector)

	// TargetNamespaces is an explicit set of namespaces to target.
	// If it is set, Selector is ignored.
	// +optional
	// +listType=set
	targetNamespaces?: [...string] @go(TargetNamespaces,[]string)

	// ServiceAccountName is the admin specified service account which will be
	// used to deploy operator(s) in this operator group.
	serviceAccountName?: string @go(ServiceAccountName)

	// Static tells OLM not to update the OperatorGroup's providedAPIs annotation
	// +optional
	staticProvidedAPIs?: bool @go(StaticProvidedAPIs)
}

// OperatorGroupStatus is the status for an OperatorGroupResource.
#OperatorGroupStatus: {
	// Namespaces is the set of target namespaces for the OperatorGroup.
	// +listType=set
	namespaces?: [...string] @go(Namespaces,[]string)

	// ServiceAccountRef references the service account object specified.
	serviceAccountRef?: null | #ObjectReference @go(ServiceAccountRef,*github.com/operator-framework/api/vendor/corev1.ObjectReference)

	// LastUpdated is a timestamp of the last time the OperatorGroup's status was Updated.
	lastUpdated?: null | #Time @go(LastUpdated,*github.com/operator-framework/api/vendor/metav1.Time)
}

// OperatorGroup is the unit of multitenancy for OLM managed operators.
// It constrains the installation of operators in its namespace to a specified set of target namespaces.
#OperatorGroup: {
	#TypeMeta
	metadata: #ObjectMeta @go(ObjectMeta,github.com/operator-framework/api/vendor/metav1.ObjectMeta)

	// +optional
	spec:    #OperatorGroupSpec   @go(Spec)
	status?: #OperatorGroupStatus @go(Status)
}

// OperatorGroupList is a list of OperatorGroup resources.
#OperatorGroupList: {
	#TypeMeta
	metadata: #ListMeta @go(ListMeta,github.com/operator-framework/api/vendor/metav1.ListMeta)

	// +listType=set
	items: [...#OperatorGroup] @go(Items,[]OperatorGroup)
}
