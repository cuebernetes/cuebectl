// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/operator-framework/api/pkg/operators/v1alpha1

package v1alpha1

#InstallPlanKind:       "InstallPlan"
#InstallPlanAPIVersion: "operators.coreos.com/v1alpha1"

// Approval is the user approval policy for an InstallPlan.
#Approval: string // #enumApproval

#enumApproval:
	#ApprovalAutomatic |
	#ApprovalManual

#ApprovalAutomatic: #Approval & "Automatic"
#ApprovalManual:    #Approval & "Manual"

// InstallPlanSpec defines a set of Application resources to be installed
#InstallPlanSpec: {
	source?:          string @go(CatalogSource)
	sourceNamespace?: string @go(CatalogSourceNamespace)
	clusterServiceVersionNames: [...string] @go(ClusterServiceVersionNames,[]string)
	approval:    #Approval @go(Approval)
	approved:    bool      @go(Approved)
	generation?: int       @go(Generation)
}

// InstallPlanPhase is the current status of a InstallPlan as a whole.
#InstallPlanPhase: string // #enumInstallPlanPhase

#enumInstallPlanPhase:
	#InstallPlanPhaseNone |
	#InstallPlanPhasePlanning |
	#InstallPlanPhaseRequiresApproval |
	#InstallPlanPhaseInstalling |
	#InstallPlanPhaseComplete |
	#InstallPlanPhaseFailed

#InstallPlanPhaseNone:             #InstallPlanPhase & ""
#InstallPlanPhasePlanning:         #InstallPlanPhase & "Planning"
#InstallPlanPhaseRequiresApproval: #InstallPlanPhase & "RequiresApproval"
#InstallPlanPhaseInstalling:       #InstallPlanPhase & "Installing"
#InstallPlanPhaseComplete:         #InstallPlanPhase & "Complete"
#InstallPlanPhaseFailed:           #InstallPlanPhase & "Failed"

// InstallPlanConditionType describes the state of an InstallPlan at a certain point as a whole.
#InstallPlanConditionType: string // #enumInstallPlanConditionType

#enumInstallPlanConditionType:
	#InstallPlanResolved |
	#InstallPlanInstalled

#InstallPlanResolved:  #InstallPlanConditionType & "Resolved"
#InstallPlanInstalled: #InstallPlanConditionType & "Installed"

// ConditionReason is a camelcased reason for the state transition.
#InstallPlanConditionReason: string // #enumInstallPlanConditionReason

#enumInstallPlanConditionReason:
	#InstallPlanReasonPlanUnknown |
	#InstallPlanReasonInstallCheckFailed |
	#InstallPlanReasonDependencyConflict |
	#InstallPlanReasonComponentFailed

#InstallPlanReasonPlanUnknown:        #InstallPlanConditionReason & "PlanUnknown"
#InstallPlanReasonInstallCheckFailed: #InstallPlanConditionReason & "InstallCheckFailed"
#InstallPlanReasonDependencyConflict: #InstallPlanConditionReason & "DependenciesConflict"
#InstallPlanReasonComponentFailed:    #InstallPlanConditionReason & "InstallComponentFailed"

// StepStatus is the current status of a particular resource an in
// InstallPlan
#StepStatus: string // #enumStepStatus

#enumStepStatus:
	#StepStatusUnknown |
	#StepStatusNotPresent |
	#StepStatusPresent |
	#StepStatusCreated |
	#StepStatusWaitingForAPI |
	#StepStatusUnsupportedResource

#StepStatusUnknown:             #StepStatus & "Unknown"
#StepStatusNotPresent:          #StepStatus & "NotPresent"
#StepStatusPresent:             #StepStatus & "Present"
#StepStatusCreated:             #StepStatus & "Created"
#StepStatusWaitingForAPI:       #StepStatus & "WaitingForApi"
#StepStatusUnsupportedResource: #StepStatus & "UnsupportedResource"

// InstallPlanStatus represents the information about the status of
// steps required to complete installation.
//
// Status may trail the actual state of a system.
#InstallPlanStatus: {
	phase: #InstallPlanPhase @go(Phase)
	conditions?: [...#InstallPlanCondition] @go(Conditions,[]InstallPlanCondition)
	catalogSources: [...string] @go(CatalogSources,[]string)
	plan?: [...null | #Step] @go(Plan,[]*Step)

	// BundleLookups is the set of in-progress requests to pull and unpackage bundle content to the cluster.
	// +optional
	bundleLookups?: [...#BundleLookup] @go(BundleLookups,[]BundleLookup)

	// AttenuatedServiceAccountRef references the service account that is used
	// to do scoped operator install.
	attenuatedServiceAccountRef?: null | #ObjectReference @go(AttenuatedServiceAccountRef,*github.com/operator-framework/api/vendor/corev1.ObjectReference)
}

// InstallPlanCondition represents the overall status of the execution of
// an InstallPlan.
#InstallPlanCondition: {
	type?:               #InstallPlanConditionType   @go(Type)
	status?:             #ConditionStatus            @go(Status,github.com/operator-framework/api/vendor/corev1.ConditionStatus)
	lastUpdateTime?:     null | #Time                @go(LastUpdateTime,*github.com/operator-framework/api/vendor/metav1.Time)
	lastTransitionTime?: null | #Time                @go(LastTransitionTime,*github.com/operator-framework/api/vendor/metav1.Time)
	reason?:             #InstallPlanConditionReason @go(Reason)
	message?:            string                      @go(Message)
}

// Step represents the status of an individual step in an InstallPlan.
#Step: {
	resolving: string        @go(Resolving)
	resource:  #StepResource @go(Resource)
	status:    #StepStatus   @go(Status)
}

// BundleLookupConditionType is a category of the overall state of a BundleLookup.
#BundleLookupConditionType: string // #enumBundleLookupConditionType

#enumBundleLookupConditionType:
	#BundleLookupPending

// BundleLookupPending describes BundleLookups that are not complete.
#BundleLookupPending: #BundleLookupConditionType & "BundleLookupPending"

#BundleLookupCondition: {
	// Type of condition.
	type: #BundleLookupConditionType @go(Type)

	// Status of the condition, one of True, False, Unknown.
	status: #ConditionStatus @go(Status,github.com/operator-framework/api/vendor/corev1.ConditionStatus)

	// The reason for the condition's last transition.
	// +optional
	reason?: string @go(Reason)

	// A human readable message indicating details about the transition.
	// +optional
	message?: string @go(Message)

	// Last time the condition was probed.
	// +optional
	lastUpdateTime?: null | #Time @go(LastUpdateTime,*github.com/operator-framework/api/vendor/metav1.Time)

	// Last time the condition transitioned from one status to another.
	// +optional
	lastTransitionTime?: null | #Time @go(LastTransitionTime,*github.com/operator-framework/api/vendor/metav1.Time)
}

// BundleLookup is a request to pull and unpackage the content of a bundle to the cluster.
#BundleLookup: {
	// Path refers to the location of a bundle to pull.
	// It's typically an image reference.
	path: string @go(Path)

	// Identifier is the catalog-unique name of the operator (the name of the CSV for bundles that contain CSVs)
	identifier: string @go(Identifier)

	// Replaces is the name of the bundle to replace with the one found at Path.
	replaces: string @go(Replaces)

	// CatalogSourceRef is a reference to the CatalogSource the bundle path was resolved from.
	catalogSourceRef?: null | #ObjectReference @go(CatalogSourceRef,*github.com/operator-framework/api/vendor/corev1.ObjectReference)

	// Conditions represents the overall state of a BundleLookup.
	// +optional
	conditions?: [...#BundleLookupCondition] @go(Conditions,[]BundleLookupCondition)
}

// StepResource represents the status of a resource to be tracked by an
// InstallPlan.
#StepResource: {
	sourceName:      string @go(CatalogSource)
	sourceNamespace: string @go(CatalogSourceNamespace)
	group:           string @go(Group)
	version:         string @go(Version)
	kind:            string @go(Kind)
	name:            string @go(Name)
	manifest?:       string @go(Manifest)
}

// InstallPlan defines the installation of a set of operators.
#InstallPlan: {
	#TypeMeta
	metadata: #ObjectMeta      @go(ObjectMeta,github.com/operator-framework/api/vendor/metav1.ObjectMeta)
	spec:     #InstallPlanSpec @go(Spec)

	// +optional
	status: #InstallPlanStatus @go(Status)
}

// InstallPlanList is a list of InstallPlan resources.
#InstallPlanList: {
	#TypeMeta
	metadata: #ListMeta @go(ListMeta,github.com/operator-framework/api/vendor/metav1.ListMeta)
	items: [...#InstallPlan] @go(Items,[]InstallPlan)
}
